MODULE OPER;

CONST
   NUM_PHON = 64;                   (* NUMBER OF PHONEMS *)
   NUM_RULE = 100;                  (* NUMBER OF RULES ALLOWED *)

TYPE
   PHO_REF = RECORD
                ALPHA:STRING[5];    (* ALPHABETIC REPRESENTATION OF PHONEM *)
                CODE:BYTE           (* PHONEM CODE *)
             END; (* RECORD *)

RULES = ARRAY[1..NUM_RULE] OF STRING[30];
PHO_LIST = ARRAY[1..NUM_PHON] OF PHO_REF;

VAR
   RUL_TBL:EXTERNAL RULES;
   PHO_TBL:EXTERNAL PHO_LIST;
   ERROR:EXTERNAL BOOLEAN;

EXTERNAL PROCEDURE CLEAR_CRT;
EXTERNAL PROCEDURE GETNAM(VAR PAR1:STRING);
EXTERNAL PROCEDURE OPENS(PAR1:STRING; VAR PAR2:TEXT);
EXTERNAL PROCEDURE CLOSS(PAR1:STRING; VAR PAR2:TEXT);
EXTERNAL PROCEDURE ENG_TO_PH(VAR PAR1:STRING);
EXTERNAL PROCEDURE DUMP_PH;

{******************************************************************************

 GET_FIL - READ A TEXT FILE AND CONVERT IT TO PHONEMS

******************************************************************************}

PROCEDURE GET_FIL;

VAR
   INFILE:TEXT;
   INBUF,INNAME:STRING;

BEGIN (* PROCEDURE *)
   ERROR:=FALSE;                 (* CLEAR INITIALLY *)
   CLEAR_CRT;                    (* CLEAR THE CRT *)
   GETNAM(INNAME);               (* GET INPUT FILE NAME *)
   OPENS(INNAME,INFILE);         (* OPEN INPUT FILE *)
   IF NOT ERROR THEN BEGIN
      WRITELN;                   (* SEND NEWLINE *)
      WHILE (NOT EOF(INFILE)) AND (NOT ERROR) DO BEGIN
         READLN(INFILE,INBUF);   (* READ ENGLISH TEXT *)
         WRITELN(INBUF);         (* ECHO TEXT TO CRT *)
         ENG_TO_PH(INBUF);       (* CONVERT TO PHONEMS *)
         DUMP_PH                 (* DUMP PHONEMS TO SYNTHESIZER *)
      END; (* WHILE *)
      CLOSS(INNAME,INFILE)       (* CLOSE INPUT FILE *)
   END (* IF *)
END; (* PROCEDURE *)

{*****************************************************************************

 GET_KEY - READ A LINE FROM THE KEYBOARD AND GENERATE PHONEMS

*****************************************************************************}

PROCEDURE GET_KEY;

VAR
   INBUF:STRING;

BEGIN (* PROCEDURE *)
   CLEAR_CRT;                    (* CLEAR THE CRT *)
   REPEAT
      WRITE('ENTER TEXT - <9999> TO EXIT ');
      READLN(INBUF);             (* GET ENGLISH TEXT FROM KEYBOARD *)
      ENG_TO_PH(INBUF);          (* CONVERT TO PHONEMS *)
      DUMP_PH                    (* SEND TO SYNTHESIZER *)
   UNTIL INBUF = '9999'
END; (* PROCEDURE *)

(*$E-*)
{******************************************************************************

 GET_PHON - READ PHONEM FILE INTO RECORD STRUCTURE

******************************************************************************}

PROCEDURE GET_PHON;

VAR
   INDEX:INTEGER;
   INFILE:TEXT;
   INBUF,INNAME:STRING;
   CODE:BYTE;
   CH:CHAR;

BEGIN (* PROCEDURE *)
   INNAME:='PHONEMS.LIB';        (* SET UP FILE NAME *)
   OPENS(INNAME,INFILE);         (* OPEN INPUT FILE *)
   IF NOT ERROR THEN BEGIN
      INDEX:=1;                  (* POINT TO BEGINING OF ARRAY *)
      WRITELN;                   (* SEND NEWLINE *)
      WRITELN('READING PHONEM FILE');
      WRITELN;                   (* SEND NEWLINE *)
      WHILE (NOT EOF(INFILE)) AND (NOT ERROR) DO BEGIN
         READ(INFILE,CODE);      (* READ PHONEM CODE *)
         READ(INFILE,CH);        (* FLUSH SPACE *)
         READLN(INFILE,INBUF);   (* READ PHONEM TEXT *)
         PHO_TBL[INDEX].ALPHA:=INBUF; (* STORE ASCII REPRESENTATION *)
         PHO_TBL[INDEX].CODE:=CODE;   (* STORE CODE REPRESENTATION *)
         INDEX:=INDEX+1          (* BUMP INDEX *)
      END; (* WHILE *)
      CLOSS(INNAME,INFILE)       (* CLOSE INPUT FILE *)
   END (* IF *)
END; (* PROCEDURE *)

{******************************************************************************

 GET_RULE - READ RULE FILE INTO ARRAY

******************************************************************************}

PROCEDURE GET_RULE;

VAR
   INDEX:INTEGER;
   INFILE:TEXT;
   INBUF,INNAME:STRING;

BEGIN (* PROCEDURE *)
   INNAME:='RULES.LIB';          (* SET UP FILE NAME *)
   OPENS(INNAME,INFILE);         (* OPEN INPUT FILE *)
   IF NOT ERROR THEN BEGIN
      INDEX:=1;                  (* POINT TO BEGINING OF ARRAY *)
      WRITELN;                   (* SEND NEWLINE *)
      WRITELN('READING RULE FILE');
      WRITELN;                   (* SEND NEWLINE *)
      WHILE (NOT EOF(INFILE)) AND (NOT ERROR) DO BEGIN
         READLN(INFILE,INBUF);   (* READ RULE *)
         RUL_TBL[INDEX]:=INBUF;  (* STORE RULE *)
         INDEX:=INDEX+1          (* BUMP INDEX *)
      END; (* WHILE *)
      CLOSS(INNAME,INFILE)       (* CLOSE INPUT FILE *)
   END (* IF *)
END; (* PROCEDURE *)

(*$E+*)
{****************************************************************************

 GETPARM - READ PARAMATER FILES INTO DATA AREAS

****************************************************************************}

PROCEDURE GETPARM;

BEGIN (* PROCEDURE *)
   CLEAR_CRT;                    (* CLEAR THE CRT *)
   ERROR:=FALSE;                 (* CLEAR INITIALLY *)
   GET_PHON;                     (* READ PHONEMS INTO RECORD STRUCTURE *)
   IF NOT ERROR THEN
      GET_RULE                   (* READ RULES INTO ARRAYS *)
END; (* PROCEDURE *)
MODEND.

